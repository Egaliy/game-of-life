class AchievementSystem {
    constructor() {
        this.achievements = new Set(
            JSON.parse(localStorage.getItem('achievements')) || []
        );
        
        this.patterns = {
            glider: {
                pattern: [
                    [0, 1, 0],
                    [0, 0, 1],
                    [1, 1, 1]
                ],
                emoji: 'üõ∏' // –ù–õ–û –¥–ª—è –≥–ª–∞–π–¥–µ—Ä–∞
            },
            gun: {
                pattern: [
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                    [0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                    [1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [1,1,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
                ],
                emoji: 'üî´' // –ü–∏—Å—Ç–æ–ª–µ—Ç –¥–ª—è —Ä—É–∂—å—è
            },
            lwss: {
                pattern: [
                    [0, 1, 1, 1, 1],
                    [1, 0, 0, 0, 1],
                    [0, 0, 0, 0, 1],
                    [1, 0, 0, 1, 0]
                ],
                emoji: 'üöÄ'
            },
            pulsar: {
                pattern: [
                    [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1],
                    [1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1],
                    [1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1],
                    [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0],
                    [1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1],
                    [1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1],
                    [1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0]
                ],
                emoji: 'üåü'
            },
            pentadecathlon: {
                pattern: [
                    [0, 0, 1, 0, 0],
                    [0, 1, 0, 1, 0],
                    [0, 0, 1, 0, 0],
                    [0, 0, 1, 0, 0],
                    [0, 0, 1, 0, 0],
                    [0, 0, 1, 0, 0],
                    [0, 0, 1, 0, 0],
                    [0, 0, 1, 0, 0],
                    [0, 1, 0, 1, 0],
                    [0, 0, 1, 0, 0]
                ],
                emoji: 'üé≠'
            }
        };
        
        this.notification = document.createElement('div');
        this.notification.className = 'achievement-notification';
        document.body.appendChild(this.notification);

        this.createPatternsMenu();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–≤—ã–π –ª–∏ —ç—Ç–æ –≤–∏–∑–∏—Ç
        if (!localStorage.getItem('hasVisited')) {
            this.showInstructions();
            localStorage.setItem('hasVisited', 'true');
        }
    }

    createPatternsMenu() {
        this.patternsMenu = document.createElement('div');
        this.patternsMenu.className = 'patterns-menu';
        
        const patterns = [
            { id: 'glider', key: '1' },
            { id: 'gun', key: '2' },
            { id: 'lwss', key: '3' },
            { id: 'pulsar', key: '4' },
            { id: 'pentadecathlon', key: '5' }
        ];
        
        patterns.forEach(({ id, key }) => {
            const item = this.createPatternItem(id, key);
            this[`${id}Item`] = item;
        });
        
        document.body.appendChild(this.patternsMenu);
    }

    createPatternItem(id, key) {
        const item = document.createElement('div');
        item.className = 'pattern-item locked';
        item.innerHTML = this.createPatternItemContent(id, key);
        this.patternsMenu.appendChild(item);
        return item;
    }

    createPatternItemContent(id, key) {
        return `
            <div class="pattern-emoji">${this.patterns[id].emoji}</div>
            <div class="key">${key}</div>
        `;
    }

    updateUnlockedPatterns() {
        if (this.achievements.has('glider')) this.gliderItem.classList.remove('locked');
        if (this.achievements.has('gun')) this.gunItem.classList.remove('locked');
        if (this.achievements.has('lwss')) this.lwssItem.classList.remove('locked');
        if (this.achievements.has('pulsar')) this.pulsarItem.classList.remove('locked');
        if (this.achievements.has('pentadecathlon')) this.pentadecathlonItem.classList.remove('locked');
    }

    updateCreativeMode(isCreative) {
        if (isCreative) {
            this.gliderItem.classList.remove('locked');
            this.gunItem.classList.remove('locked');
            this.lwssItem.classList.remove('locked');
            this.pulsarItem.classList.remove('locked');
            this.pentadecathlonItem.classList.remove('locked');
            this.patternsMenu.classList.add('creative-mode');
        } else {
            this.updateUnlockedPatterns();
            this.patternsMenu.classList.remove('creative-mode');
        }
    }

    unlockAchievement(id, message) {
        if (this.achievements.has(id)) return;
        
        this.achievements.add(id);
        localStorage.setItem('achievements', 
            JSON.stringify(Array.from(this.achievements))
        );
        
        this.notification.textContent = `üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: ${message}`;
        this.notification.classList.add('show');
        
        if (id === 'glider') {
            this.gliderItem.classList.remove('locked');
        } else if (id === 'gun') {
            this.gunItem.classList.remove('locked');
        } else if (id === 'lwss') {
            this.lwssItem.classList.remove('locked');
        } else if (id === 'pulsar') {
            this.pulsarItem.classList.remove('locked');
        } else if (id === 'pentadecathlon') {
            this.pentadecathlonItem.classList.remove('locked');
        }
        
        setTimeout(() => {
            this.notification.classList.remove('show');
        }, 3000);
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤–æ—Ä–æ—Ç–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –Ω–∞ 90 –≥—Ä–∞–¥—É—Å–æ–≤ –ø–æ —á–∞—Å–æ–≤–æ–π —Å—Ç—Ä–µ–ª–∫–µ
    rotatePattern(pattern) {
        const rows = pattern.length;
        const cols = pattern[0].length;
        let result = Array(cols).fill().map(() => Array(rows).fill(0));
        
        for (let i = 0; i < rows; i++) {
            for (let j = 0; j < cols; j++) {
                result[j][rows - 1 - i] = pattern[i][j];
            }
        }
        return result;
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Ä–∞–∂–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
    flipHorizontal(pattern) {
        return pattern.map(row => [...row].reverse());
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Ä–∞–∂–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
    flipVertical(pattern) {
        return [...pattern].reverse();
    }

    // –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –≤–∞—Ä–∏–∞—Ü–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω–∞
    getAllPatternVariations(pattern) {
        let variations = [];
        let current = pattern;

        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ 4 –ø–æ–≤–æ—Ä–æ—Ç–∞
        for (let i = 0; i < 4; i++) {
            variations.push(current);
            current = this.rotatePattern(current);
        }

        // –û—Ç—Ä–∞–∂–∞–µ–º –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ—â–µ 4 –ø–æ–≤–æ—Ä–æ—Ç–∞
        current = this.flipHorizontal(pattern);
        for (let i = 0; i < 4; i++) {
            variations.push(current);
            current = this.rotatePattern(current);
        }

        // –û—Ç—Ä–∞–∂–∞–µ–º –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ—â–µ 4 –ø–æ–≤–æ—Ä–æ—Ç–∞
        current = this.flipVertical(pattern);
        for (let i = 0; i < 4; i++) {
            variations.push(current);
            current = this.rotatePattern(current);
        }

        // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã (–ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞–∂–¥—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)
        return variations.filter((pattern, index, self) => 
            index === self.findIndex(p => 
                JSON.stringify(p) === JSON.stringify(pattern)
            )
        );
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
    checkPattern(cells, columns, rows) {
        Object.entries(this.patterns).forEach(([id, {pattern}]) => {
            const variations = this.getAllPatternVariations(pattern);
            const height = pattern.length;
            const width = pattern[0].length;
            
            // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –Ω–µ –≤—ã—Ö–æ–¥–∏–º –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –ø–æ–ª—è
            for (let y = 0; y < rows - height + 1; y++) {
                for (let x = 0; x < columns - width + 1; x++) {
                    if (variations.some(p => this.matchPattern(cells, x, y, columns, p))) {
                        let message;
                        switch(id) {
                            case 'glider': message = '–°–æ–∑–¥–∞–Ω –≥–ª–∞–π–¥–µ—Ä!'; break;
                            case 'gun': message = '–°–æ–∑–¥–∞–Ω–æ –≥–ª–∞–π–¥–µ—Ä–Ω–æ–µ —Ä—É–∂—å–µ!'; break;
                            case 'lwss': message = '–°–æ–∑–¥–∞–Ω LWSS!'; break;
                            case 'pulsar': message = '–°–æ–∑–¥–∞–Ω –ø—É–ª—å—Å–∞—Ä!'; break;
                            case 'pentadecathlon': message = '–°–æ–∑–¥–∞–Ω –ø–µ–Ω—Ç–∞–¥–µ–∫–∞—Ç–ª–æ–Ω!'; break;
                            default: message = `–°–æ–∑–¥–∞–Ω ${id}!`;
                        }
                        this.unlockAchievement(id, message);
                    }
                }
            }
        });
    }

    matchPattern(cells, startX, startY, columns, pattern) {
        for (let y = 0; y < pattern.length; y++) {
            for (let x = 0; x < pattern[0].length; x++) {
                const cellIndex = (startY + y) * columns + (startX + x);
                const isAlive = cells[cellIndex].classList.contains('a');
                if (isAlive !== Boolean(pattern[y][x])) {
                    return false;
                }
            }
        }
        return true;
    }

    hasAchievement(id) {
        return this.achievements.has(id) || creativeMode;
    }

    resetAchievements() {
        // –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        this.achievements.clear();
        
        // –û—á–∏—â–∞–µ–º localStorage
        localStorage.removeItem('achievements');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é
        this.gliderItem.classList.add('locked');
        this.gunItem.classList.add('locked');
        this.lwssItem.classList.add('locked');
        this.pulsarItem.classList.add('locked');
        this.pentadecathlonItem.classList.add('locked');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —ç–º–æ–¥–∑–∏
        this.notification.textContent = "üîÑ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã";
        this.notification.classList.add('show');
        setTimeout(() => {
            this.notification.classList.remove('show');
        }, 3000);
    }

    showInstructions() {
        const instructions = document.createElement('div');
        instructions.className = 'instructions-modal';
        instructions.innerHTML = `
            <div class="instructions-content">
                <h2>üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–π</h2>
                <ul>
                    <li><strong>–ü—Ä–æ–±–µ–ª</strong> - –∑–∞–ø—É—Å–∫/–ø–∞—É–∑–∞ —Å–∏–º—É–ª—è—Ü–∏–∏</li>
                    <li><strong>Q</strong> - –æ—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª–µ</li>
                    <li><strong>C</strong> - –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –∫—Ä–µ–∞—Ç–∏–≤–∞</li>
                    <li><strong>]</strong> - —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è</li>
                </ul>

                <h2>üèóÔ∏è –ö–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏</h2>
                <ul>
                    <li><strong>1</strong> - —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –≥–ª–∞–π–¥–µ—Ä üõ∏</li>
                    <li><strong>2</strong> - —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Ä—É–∂—å–µ üî´</li>
                    <li><strong>3</strong> - —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å LWSS üöÄ</li>
                    <li><strong>4</strong> - —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –ø—É–ª—å—Å–∞—Ä üåü</li>
                    <li><strong>5</strong> - —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –ø–µ–Ω—Ç–∞–¥–µ–∫–∞—Ç–ª–æ–Ω üé≠</li>
                </ul>

                <h2>üéØ –ö–∞–∫ –∏–≥—Ä–∞—Ç—å</h2>
                <p>–ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–ª–µ—Ç–∫–∏, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞–≤–∞—Ç—å –∂–∏–≤—ã–µ –∫–ª–µ—Ç–∫–∏. –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, —á—Ç–æ–±—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è. –ò–ª–∏ –≤–∫–ª—é—á–∏—Ç–µ —Ä–µ–∂–∏–º –∫—Ä–µ–∞—Ç–∏–≤–∞ (C), —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º —Å—Ä–∞–∑—É!</p>

                <button class="close-instructions">–ü–æ–Ω—è—Ç–Ω–æ!</button>
            </div>
        `;

        document.body.appendChild(instructions);

        const closeButton = instructions.querySelector('.close-instructions');
        closeButton.addEventListener('click', () => {
            instructions.classList.add('fade-out');
            setTimeout(() => instructions.remove(), 300);
        });
    }
}